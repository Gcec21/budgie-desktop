From b729887573dc16b1a75e0972b107e82356f83169 Mon Sep 17 00:00:00 2001
From: David Mohammed <fossfreedom@ubuntu.com>
Date: Sat, 8 Jun 2024 23:09:43 +0000
Subject: [PATCH 1/2] Use swaybg to set our wallpaper This implementation
 borrows the similar technique of the X11 wallpaper implementation using
 gnome-desktop to filter frequent changes etc. A future reimplementation
 should replace swaybg with a coded implementation to-do background switch
 animations.

---
 src/daemon/background.vala | 117 +++++++++++++++++++++++++++++++++++++
 src/daemon/main.vala       |  12 ----
 src/daemon/manager.vala    |   8 ++-
 src/daemon/menus.vala      |  37 ------------
 src/daemon/meson.build     |  12 ++--
 5 files changed, 128 insertions(+), 58 deletions(-)
 create mode 100644 src/daemon/background.vala

diff --git a/src/daemon/background.vala b/src/daemon/background.vala
new file mode 100644
index 00000000..d70b8af1
--- /dev/null
+++ b/src/daemon/background.vala
@@ -0,0 +1,117 @@
+/*
+ * This file is part of budgie-desktop
+ *
+ * Copyright Budgie Desktop Developers
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+namespace Budgie {
+	public const string BACKGROUND_SCHEMA = "org.gnome.desktop.background";
+	public const string ACCOUNTS_SCHEMA = "org.freedesktop.Accounts";
+	public const string GNOME_COLOR_HACK = "budgie-control-center/pixmaps/noise-texture-light.png";
+
+	public class Background  {
+		private Settings? settings = null;
+
+		const int BACKGROUND_TIMEOUT = 850;
+
+		/* Ensure we're efficient with changed queries and dont update
+		* a bunch of times
+		*/
+		Gnome.BG? gnome_bg;
+		Subprocess? bg = null;
+
+		/**
+		* Determine if the wallpaper is a colour wallpaper or not
+		*/
+		private bool is_color_wallpaper(string bg_filename) {
+			if (gnome_bg.get_placement() == GDesktop.BackgroundStyle.NONE || bg_filename.has_suffix(GNOME_COLOR_HACK)) {
+				return true;
+			}
+			return false;
+		}
+
+		public Background() {
+			settings = new Settings(BACKGROUND_SCHEMA);
+			gnome_bg = new Gnome.BG();
+
+			/* If the background keys change, proxy it to libgnomedesktop */
+			settings.change_event.connect(() => {
+				gnome_bg.load_from_preferences(this.settings);
+				return false;
+			});
+
+			gnome_bg.changed.connect(() => {
+				this.update();
+			});
+
+			/* Do the initial load */
+			gnome_bg.load_from_preferences(this.settings);
+		}
+
+		/**
+		* call accountsservice dbus with the background file name
+		* to update the greeter background if the display
+		* manager supports the dbus call.
+		*/
+		void set_accountsservice_user_bg(string background) {
+			DBusConnection bus;
+			Variant variant;
+
+			try {
+				bus = Bus.get_sync(BusType.SYSTEM);
+			} catch (IOError e) {
+				warning("Failed to get system bus: %s", e.message);
+				return;
+			}
+
+			try {
+				variant = bus.call_sync(ACCOUNTS_SCHEMA, "/org/freedesktop/Accounts", ACCOUNTS_SCHEMA, "FindUserByName",
+					new Variant("(s)", Environment.get_user_name()), new VariantType("(o)"), DBusCallFlags.NONE, -1, null);
+			} catch (Error e) {
+				warning("Could not contact accounts service to look up '%s': %s", Environment.get_user_name(), e.message);
+				return;
+			}
+
+			string object_path = variant.get_child_value(0).get_string();
+
+			try {
+				bus.call_sync(ACCOUNTS_SCHEMA, object_path, "org.freedesktop.DBus.Properties", "Set",
+					new Variant("(ssv)", "org.freedesktop.DisplayManager.AccountsService", "BackgroundFile",
+						new Variant.string(background)
+					), new VariantType("()"), DBusCallFlags.NONE, -1, null);
+			} catch (Error e) {
+				warning("Failed to set the background '%s': %s", background, e.message);
+			}
+		}
+
+		void update() {
+			string? bg_filename = gnome_bg.get_filename();;
+			/* Set background image when appropriate, and for now dont parse .xml files */
+			if (!this.is_color_wallpaper(bg_filename) && !bg_filename.has_suffix(".xml")) {
+				// we use swaybg to define the wallpaper - we need to keep track
+				// of what we create so that we kill it the next time a background is defined
+				string[] cmdline = { "swaybg", "-i", bg_filename };
+				Subprocess new_bg;
+				try {
+					new_bg = new Subprocess.newv(cmdline, SubprocessFlags.NONE);
+					Timeout.add(BACKGROUND_TIMEOUT, () => {
+						// use a delay to allow process termination to complete
+						if (bg != null) {
+							bg.force_exit();
+						}
+						bg = new_bg;
+						return false;
+					});
+				} catch (Error e) {
+					warning("Error starting swaybg: %s", e.message);
+				}
+				set_accountsservice_user_bg(bg_filename);
+			}
+		}
+	}
+}
diff --git a/src/daemon/main.vala b/src/daemon/main.vala
index 79d17f8d..63969a52 100644
--- a/src/daemon/main.vala
+++ b/src/daemon/main.vala
@@ -47,8 +47,6 @@ public static int main(string[] args) {
 	Budgie.ServiceManager? manager = null;
 	Budgie.EndSessionDialog? end_dialog = null;
 	Budgie.SettingsManager? settings = null;
-	Wnck.Screen? screen = null;
-
 	Intl.setlocale(LocaleCategory.ALL, "");
 	Intl.bindtextdomain(Budgie.GETTEXT_PACKAGE, Budgie.LOCALEDIR);
 	Intl.bind_textdomain_codeset(Budgie.GETTEXT_PACKAGE, "UTF-8");
@@ -66,15 +64,6 @@ public static int main(string[] args) {
 		return 0;
 	}
 
-	/* Initialise wnck after gtk-start */
-	Idle.add(() => {
-		screen = Wnck.Screen.get_default();
-		if (screen != null) {
-			screen.force_update();
-		}
-		return false;
-	});
-
 	/* Initialize libnotify */
 	Notify.init("com.solus-project.budgie-daemon");
 
@@ -92,7 +81,6 @@ public static int main(string[] args) {
 	manager = null;
 	end_dialog = null;
 	settings = null;
-	screen = null;
 
 	return 0;
 }
diff --git a/src/daemon/manager.vala b/src/daemon/manager.vala
index 939eb9ec..16da851b 100644
--- a/src/daemon/manager.vala
+++ b/src/daemon/manager.vala
@@ -23,9 +23,10 @@ namespace Budgie {
 		Budgie.Notifications.Server? notifications;
 		Budgie.StatusNotifier.FreedesktopWatcher? status_notifier;
 		Budgie.MenuManager? menus;
-		Budgie.TabSwitcher? switcher;
+		//Budgie.TabSwitcher? switcher;
 		BudgieScr.ScreenshotServer? screenshotcontrol;
 		Budgie.XDGDirTracker? xdg_tracker;
+		Budgie.Background? background;
 
 		/**
 		* Construct a new ServiceManager and initialiase appropriately
@@ -45,8 +46,9 @@ namespace Budgie {
 			notifications.setup_dbus(replace);
 			menus = new Budgie.MenuManager();
 			menus.setup_dbus(replace);
-			switcher = new Budgie.TabSwitcher();
-			switcher.setup_dbus(replace);
+			//switcher = new Budgie.TabSwitcher();
+			//switcher.setup_dbus(replace);
+			background = new Budgie.Background();
 
 			try {
 				screenshotcontrol = new BudgieScr.ScreenshotServer();
diff --git a/src/daemon/menus.vala b/src/daemon/menus.vala
index 46df7ed3..86ac1290 100644
--- a/src/daemon/menus.vala
+++ b/src/daemon/menus.vala
@@ -28,8 +28,6 @@ namespace Budgie {
 	[DBus (name="org.budgie_desktop.MenuManager")]
 	public class MenuManager {
 		private Gtk.Menu? desktop_menu = null;
-		private unowned Wnck.Window? active_window = null;
-		private Wnck.ActionMenu? action_menu = null;
 		private uint32 xid = 0;
 
 		[DBus (visible=false)]
@@ -110,41 +108,6 @@ namespace Budgie {
 			Budgie.setup = true;
 		}
 
-		/**
-		* We've been asked to display the root menu for the desktop itself,
-		* which contains actions for launching the settings, etc.
-		*/
-		public void ShowDesktopMenu(uint button, uint32 timestamp) throws DBusError, IOError {
-			Idle.add(() => {
-				if (desktop_menu.get_visible()) {
-					desktop_menu.hide();
-				} else {
-					popup_menu(desktop_menu, button, timestamp);
-				}
-				return false;
-			});
-		}
-
-		/**
-		* Show a window menu for the given window ID
-		*/
-		public void ShowWindowMenu(uint32 xid, uint button, uint32 timestamp) throws DBusError, IOError {
-			active_window = Wnck.Window.get(xid);
-			if (active_window == null) {
-				warning("invalid active_window");
-				return;
-			}
-
-			Idle.add(() => {
-				action_menu = new Wnck.ActionMenu(active_window);
-				action_menu.show_all();
-				popup_menu(action_menu, button, timestamp);
-				return false;
-			});
-
-			this.xid = xid;
-		}
-
 		private void popup_menu(Gtk.Menu menu, uint button, uint32 timestamp) {
 			menu.popup(null, null, null, button, timestamp == 0 ? Gdk.CURRENT_TIME : timestamp);
 		}
diff --git a/src/daemon/meson.build b/src/daemon/meson.build
index e202e3a3..6311ac3a 100644
--- a/src/daemon/meson.build
+++ b/src/daemon/meson.build
@@ -28,13 +28,13 @@ daemon_sources = [
     'notifications/dbus.vala',
     'notifications/popup.vala',
     'screenshot.vala',
+    'background.vala',
     'statusnotifier.vala',
     'main.vala',
     'manager.vala',
     'menus.vala',
     'osd.vala',
     'settings.vala',
-    'tabswitcher.vala',
     'xdgdirtracker/dbus.vala',
 ]
 
@@ -49,6 +49,7 @@ daemon_deps = [
     dep_xfce4windowing,
     dep_gst,
     dep_cairo,
+    dep_gnomedesktop,
     link_libbudgieprivate,
     libpanelplugin_vapi,
     link_libappsys,
@@ -60,7 +61,7 @@ daemon_deps = [
 # Need absolute path to gresource
 gresource = join_paths(meson.current_source_dir(), 'budgie-daemon.gresource.xml')
 
-daemon_vala_args = []
+daemon_vala_args = ['--pkg', 'gnome-desktop-3.0']
 
 dep_gsd_doubles = dependency('gnome-settings-daemon', version: '>=3.33.90', required: false)
 if dep_gsd.found()
@@ -73,6 +74,9 @@ top_vapidir = join_paths(meson.source_root(), 'vapi')
 executable(
     'budgie-daemon', daemon_sources,
     dependencies: daemon_deps,
+    c_args: [
+        '-DGNOME_DESKTOP_USE_UNSTABLE_API',
+    ],
     link_whole: [
         lib_daemon_resources,
     ],
@@ -86,16 +90,12 @@ executable(
         '--pkg', 'gio-unix-2.0',
         '--pkg', 'gtk+-3.0',
         '--pkg', 'gdk-x11-3.0',
-        '--pkg', 'libwnck-3.0',
         '--pkg', 'libxfce4windowing-0',
         # Make gresource work
         '--target-glib=2.38',
         '--gresources=' + gresource,
         daemon_vala_args,
     ],
-    c_args: [
-        '-DWNCK_I_KNOW_THIS_IS_UNSTABLE',
-    ],
     install: true,
 )
 
-- 
2.43.0

